{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Well met, fellow data analyst!</p> <p>If you're like me, then you're used to pesky stakeholders, who ask you why a metric went up or down. These kind of asks are tricky to answer with precision. It usually ends up by sharing a few other metrics, giving some context, and suggesting a hypothesis. All the while hoping the stakeholder will be satisfied and go away \ud83d\ude2e\u200d\ud83d\udca8</p> <p></p> <p></p> <p>This isn't a good situation to be in. But what if you could tell exactly why a metric changed? Wouldn't that be great? \ud83e\udd29</p> <p><code>icanexplain</code> is a Python package. It provides a framework to break a metric down into drivers. It allows attributing the change in a metric to each of its drivers. Instead of just measuring the evolution of each driver, we can exactly quantify how much of the metric's evolution is due to each driver.</p> <p>The best way to understand how <code>icanexplain</code> works is to see it in action, by checking out the examples. If you're interested in the technical details, you can check out the methodology section.</p> <p><code>icanexplain</code> works with pandas and Polars out of the box. Additionally, it can run against other backends, because it is implemented with Ibis. Check out this example for more information.</p> <p></p>"},{"location":"installation/","title":"Installation","text":"<pre><code>pip install icanexplain\n</code></pre>"},{"location":"examples/fashion-brand-co2e/","title":"Fashion brand CO2e emissions","text":"<p>Fashion brands increasingly have to be aware and report on their environmental footprint.</p> <p>The following dataset comes from a real fashion brand, and has been anomamized. Each row represents a product manufactured in a given year.</p> <pre><code>import icanexplain as ice\n\ndef fmt_CO2e(kg):\n    if abs(kg) &lt; 1e3:\n        return f'{kg:,.1f}kgCO2e'\n    return f'{kg / 1e6:,.1f}ktCO2e'\n\nproducts = ice.datasets.load_product_footprints()\nproducts.head(3).style.format({'footprint': fmt_CO2e, 'units': '{:,d}'})\n</code></pre> year category product_id footprint units 0 2021 DRESS 848be709 96.0kgCO2e 803 1 2021 DRESS 658f92b3 58.1kgCO2e 3,367 2 2021 DRESS 3a26f323 82.9kgCO2e 240 <p>The <code>footprint</code> column indicates the product's carbon footprint in kgCO2e. The <code>units</code> column corresponds to the number of units produced.</p> <p>Companies usually report their emissions on a yearly basis. We can do this by multiplying the footprint of each product by the number of units produced, and summing the results.</p> <pre><code>(\n    products\n    .groupby('year')\n    .apply(lambda g: (g['footprint'] * g['units']).sum() / g['units'].sum(), include_groups=False)\n    .to_frame('average')\n    .assign(diff=lambda x: x.average.diff())\n    .style.format(fmt_CO2e, na_rep='')\n)\n</code></pre> average diff year 2021 22.0kgCO2e 2022 21.7kgCO2e -0.2kgCO2e 2023 22.7kgCO2e 1.0kgCO2e <pre><code>explainer = ice.MeanExplainer(\n    fact='footprint',\n    count='units',\n    period='year',\n    group='category',\n)\nexplanation = explainer(products)\n#explanation.style.format({'mean': fmt_CO2e, 'total': fmt_CO2e, 'inner': fmt_CO2e, 'mix': fmt_CO2e}, na_rep='')\nexplanation\n</code></pre> inner mix year category 2022 DRESS 0.047641 -0.136117 JACKET -0.165587 -0.690534 PANTS 0.614527 0.202821 SHIRT -0.017933 0.004249 SWEATER -0.394262 -0.088120 TSHIRT 0.084757 0.301677 2023 DRESS -0.081552 0.512899 JACKET -0.129072 0.969850 PANTS -0.218760 -0.088232 SHIRT 0.017802 -0.034301 SWEATER -0.062852 0.357931 TSHIRT -0.162470 -0.055981 <pre><code>explanation.groupby('year').sum().sum(axis=1)\n</code></pre> <pre><code>year\n2022   -0.236879\n2023    1.025264\ndtype: float64\n</code></pre> <p>Here's the meaning of each column:</p> <ul> <li><code>inner</code> is the difference due to the change in the average footprint per unit. A negative inner values means the footprint per unit shifted in a way that reduced emissions. For instance, low emission products seem to have been prioritized in 2022 (-17.5ktCO2e), but not in 2023 (+73.4ktCO2e).</li> <li><code>mix</code> is the difference due to the change in the number of units produced. A negative mix value means the number of units produced shifted in a way that reduced emissions.</li> </ul> <p>A convenient way to read these values is to use a waterfall chart.</p> <pre><code>explainer.plot(products)\n</code></pre> <p>This is better than reporting the average footprint and unit produced separately. It's more informative to quantify their contribution to the change in emissions. Here it's good to confirm that the decrease in emissions is mostly due to a reduction in the number of units produced for both years. But it's also good to see that there was an increase due to the average footprint in 2023. Importantly, each one of these effects is calculated, and not just assumed.</p> <p>It's natural to want to deepen the analysis. For instance:</p> <ol> <li>Why is there a significant inner contribution for pants in 2022? Is it because the materials are less sustainable? Or because the pants got heavier?</li> <li>The reduction in 2023 is mainly due to the reduction in the number of units produced. Can this be broken down into marketing segments? For instance, is the reduction mainly driven by online or in-person sales? How does this break down by country?</li> </ol> <p>These questions hint at the interactive aspect of this kind of analysis. Once you break down a metric's evolution along a dimension, the next steps are to break down the metric (question 1) and/or include another dimension (question 2).</p>"},{"location":"examples/ibis/","title":"Different backend support with Ibis","text":"<pre><code>import ibis\nimport icanexplain as ice\n\nproducts_df = ice.datasets.load_product_footprints()\ncon = ibis.connect(\"duckdb://example.ddb\")\ncon.create_table(\n    \"products\", products_df, overwrite=True\n)\n</code></pre> <pre>DatabaseTable: products\n  year       int64\n  category   string\n  product_id string\n  footprint  float64\n  units      int64\n</pre> <pre><code>con = ibis.connect(\"duckdb://example.ddb\")\ncon.list_tables()\n</code></pre> <pre><code>['products']\n</code></pre> <pre><code>ibis.options.interactive = True\nproducts = con.table(\"products\")\nproducts.head()\n</code></pre> <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 year  \u2503 category \u2503 product_id \u2503 footprint \u2503 units \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64 \u2502 string   \u2502 string     \u2502 float64   \u2502 int64 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  2021 \u2502 DRESS    \u2502 848be709   \u2502     96.04 \u2502   803 \u2502\n\u2502  2021 \u2502 DRESS    \u2502 658f92b3   \u2502     58.15 \u2502  3367 \u2502\n\u2502  2021 \u2502 DRESS    \u2502 3a26f323   \u2502     82.94 \u2502   240 \u2502\n\u2502  2021 \u2502 DRESS    \u2502 6221dca6   \u2502     85.94 \u2502   432 \u2502\n\u2502  2021 \u2502 DRESS    \u2502 46864ac5   \u2502     84.99 \u2502   816 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <pre><code>explainer = ice.SumExplainer(\n    fact='footprint',\n    count='units',\n    group='category',\n    period='year'\n)\nexplanation = explainer(products)\nexplanation\n</code></pre> <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 year  \u2503 category \u2503 inner         \u2503 mix           \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64 \u2502 string   \u2502 float64       \u2502 float64       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  2022 \u2502 DRESS    \u2502  3.931932e+06 \u2502 -1.881370e+07 \u2502\n\u2502  2022 \u2502 JACKET   \u2502 -1.510008e+07 \u2502 -9.238617e+07 \u2502\n\u2502  2022 \u2502 PANTS    \u2502  4.002506e+07 \u2502  5.295190e+07 \u2502\n\u2502  2022 \u2502 SHIRT    \u2502 -1.484809e+06 \u2502 -5.791456e+06 \u2502\n\u2502  2022 \u2502 SWEATER  \u2502 -2.676209e+07 \u2502  1.181504e+07 \u2502\n\u2502  2022 \u2502 TSHIRT   \u2502  6.650940e+06 \u2502 -2.311836e+07 \u2502\n\u2502  2023 \u2502 DRESS    \u2502 -4.078094e+06 \u2502 -1.240339e+07 \u2502\n\u2502  2023 \u2502 JACKET   \u2502 -6.793317e+06 \u2502 -4.924036e+07 \u2502\n\u2502  2023 \u2502 PANTS    \u2502 -1.636299e+07 \u2502 -2.295608e+08 \u2502\n\u2502  2023 \u2502 SHIRT    \u2502  8.920908e+05 \u2502 -4.019144e+06 \u2502\n\u2502     \u2026 \u2502 \u2026        \u2502             \u2026 \u2502             \u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <pre><code>type(explanation)\n</code></pre> <pre><code>ibis.expr.types.relations.Table\n</code></pre> <pre><code>explanation.execute()\n</code></pre> year category inner mix 0 2022 DRESS 3.931932e+06 -1.881370e+07 1 2022 JACKET -1.510008e+07 -9.238617e+07 2 2022 PANTS 4.002506e+07 5.295190e+07 3 2022 SHIRT -1.484809e+06 -5.791456e+06 4 2022 SWEATER -2.676209e+07 1.181504e+07 5 2022 TSHIRT 6.650940e+06 -2.311836e+07 6 2023 DRESS -4.078094e+06 -1.240339e+07 7 2023 JACKET -6.793317e+06 -4.924036e+07 8 2023 PANTS -1.636299e+07 -2.295608e+08 9 2023 SHIRT 8.920908e+05 -4.019144e+06 10 2023 SWEATER -5.701391e+06 -1.130507e+08 11 2023 TSHIRT -1.150391e+07 -8.391323e+07 <pre><code>ibis.to_sql(explanation)\n</code></pre> <pre><code>SELECT\n  *\nFROM (\n  SELECT\n    \"t11\".\"year\",\n    \"t11\".\"category\",\n    \"t11\".\"count_lag\" * (\n      \"t11\".\"mean\" - \"t11\".\"mean_lag\"\n    ) AS \"inner\",\n    (\n      \"t11\".\"count\" - \"t11\".\"count_lag\"\n    ) * \"t11\".\"mean\" AS \"mix\"\n  FROM (\n    SELECT\n      \"t10\".\"category\",\n      \"t10\".\"year\",\n      \"t10\".\"mean\",\n      \"t10\".\"count\",\n      LAG(\"t10\".\"mean\", CAST(1 AS TINYINT)) OVER (PARTITION BY \"t10\".\"category\" ORDER BY \"t10\".\"year\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS \"mean_lag\",\n      LAG(\"t10\".\"count\", CAST(1 AS TINYINT)) OVER (PARTITION BY \"t10\".\"category\" ORDER BY \"t10\".\"year\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS \"count_lag\"\n    FROM (\n      SELECT\n        \"t9\".\"category\",\n        \"t9\".\"year\",\n        COALESCE(\"t9\".\"mean\", CAST(0 AS TINYINT)) AS \"mean\",\n        COALESCE(\"t9\".\"count\", CAST(0 AS TINYINT)) AS \"count\"\n      FROM (\n        SELECT\n          \"t5\".\"category\",\n          \"t6\".\"year\",\n          \"t8\".\"mean\",\n          \"t8\".\"count\"\n        FROM (\n          SELECT DISTINCT\n            *\n          FROM (\n            SELECT\n              \"t0\".\"category\"\n            FROM \"products\" AS \"t0\"\n          ) AS \"t1\"\n        ) AS \"t5\"\n        CROSS JOIN (\n          SELECT DISTINCT\n            *\n          FROM (\n            SELECT\n              \"t0\".\"year\"\n            FROM \"products\" AS \"t0\"\n          ) AS \"t2\"\n        ) AS \"t6\"\n        LEFT OUTER JOIN (\n          SELECT\n            \"t0\".\"category\",\n            \"t0\".\"year\",\n            SUM(\"t0\".\"footprint\" * \"t0\".\"units\") / SUM(\"t0\".\"units\") AS \"mean\",\n            SUM(\"t0\".\"units\") AS \"count\"\n          FROM \"products\" AS \"t0\"\n          GROUP BY\n            1,\n            2\n        ) AS \"t8\"\n          ON \"t5\".\"category\" = \"t8\".\"category\" AND \"t6\".\"year\" = \"t8\".\"year\"\n      ) AS \"t9\"\n    ) AS \"t10\"\n  ) AS \"t11\"\n  ORDER BY\n    \"t11\".\"year\" ASC,\n    \"t11\".\"category\" ASC\n) AS \"t12\"\nWHERE\n  (\n    (\n      NOT \"t12\".\"year\" IS NULL AND NOT \"t12\".\"category\" IS NULL\n    )\n    AND NOT \"t12\".\"inner\" IS NULL\n  )\n  AND NOT \"t12\".\"mix\" IS NULL\n</code></pre>"},{"location":"examples/iowa-whiskey-sales/","title":"Iowa whiskey sales","text":"<pre><code>import icanexplain as ice\n\nsales = ice.datasets.load_iowa_whiskey_sales()\nsales.head()\n</code></pre> date category vendor sales_amount price_per_bottle bottles_sold bottle_volume_ml year 0 2012-06-04 CANADIAN WHISKIES CONSTELLATION WINE COMPANY, INC. 94.02 15.67 6 1750 2012 1 2016-01-05 STRAIGHT BOURBON WHISKIES CAMPARI(SKYY) 18.76 9.38 2 375 2016 2 2016-05-25 CANADIAN WHISKIES DIAGEO AMERICAS 11.03 11.03 1 300 2016 3 2016-01-20 CANADIAN WHISKIES PHILLIPS BEVERAGE COMPANY 33.84 11.28 3 750 2016 4 2012-03-19 CANADIAN WHISKIES CONSTELLATION WINE COMPANY, INC. 94.02 15.67 6 1750 2012 <pre><code>import icanexplain as ice\n\nexplainer = ice.SumExplainer(\n    fact='sales_amount',\n    period='year',\n    group='category'\n)\nexplanation = explainer(sales)\nexplanation\n</code></pre> inner mix year category 2016 BLENDED WHISKIES 17854.426840 7356.773160 CANADIAN WHISKIES -22278.517726 225902.657726 CORN WHISKIES 0.000000 4113.900000 IRISH WHISKIES 22144.484766 75122.825234 SCOTCH WHISKIES 19591.969612 -13570.609612 SINGLE BARREL BOURBON WHISKIES 1852.032816 6375.427184 STRAIGHT BOURBON WHISKIES 107144.930127 97934.499873 STRAIGHT RYE WHISKIES -23929.320351 -69208.459649 2020 BLENDED WHISKIES 83342.597187 59768.582813 CANADIAN WHISKIES 224022.616060 149363.353940 CORN WHISKIES 1517.480513 1453.259487 IRISH WHISKIES -14048.436797 67344.406797 SCOTCH WHISKIES 19840.477504 -18869.917504 SINGLE BARREL BOURBON WHISKIES 11958.317395 3819.272605 STRAIGHT BOURBON WHISKIES 167864.459707 268064.740293 STRAIGHT RYE WHISKIES -9839.091595 64056.431595 <pre><code>explainer.plot(sales)\n</code></pre> <p>Funnel decomposition to break down the amount in dollars into bottles sold times by the price per bottle.</p>"},{"location":"examples/simple-revenue-funnel/","title":"Simple revenue funnel","text":"<pre><code>import pandas as pd\nimport locale\n\nlocale.setlocale(locale.LC_MONETARY, 'en_US.UTF-8')\ndef fmt_currency(x):\n    return locale.currency(x, grouping=True)\n\ntraffic = pd.DataFrame({\n    'date': ['2018-01-01', '2018-01-01', '2018-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2018-02-01', '2018-02-01', '2018-02-01', '2019-02-01', '2019-02-01', '2019-02-01'],\n    'group': ['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C'],\n    'impressions': [1000, 2000, 2500, 1000, 2150, 2000, 50, 2000, 2500, 2500, 2150, 2000],\n    'clicks': [150, 150, 250, 120, 200, 400, 20, 300, 250, 1000, 323, 320],\n    'conversions': [120, 150, 125, 160, 145, 166, 10, 150, 125, 500, 145, 166],\n    'revenue': ['$8,600', '$9,400', '$10,750', '$9,055', '$8,739', '$10,147', '$500', '$11,400', '$8,750', '$50,000', '$10,739', '$12,147'],\n})\ntraffic['date'] = pd.to_datetime(traffic['date'])\ntraffic['revenue'] = traffic['revenue'].str.replace('$', '', regex=False).str.replace(',', '', regex=False).astype(float)\ntraffic.style.format({'revenue': fmt_currency}, na_rep='N/A')\n</code></pre> date group impressions clicks conversions revenue 0 2018-01-01 00:00:00 A 1000 150 120 $8,600.00 1 2018-01-01 00:00:00 B 2000 150 150 $9,400.00 2 2018-01-01 00:00:00 C 2500 250 125 $10,750.00 3 2019-01-01 00:00:00 A 1000 120 160 $9,055.00 4 2019-01-01 00:00:00 B 2150 200 145 $8,739.00 5 2019-01-01 00:00:00 C 2000 400 166 $10,147.00 6 2018-02-01 00:00:00 A 50 20 10 $500.00 7 2018-02-01 00:00:00 B 2000 300 150 $11,400.00 8 2018-02-01 00:00:00 C 2500 250 125 $8,750.00 9 2019-02-01 00:00:00 A 2500 1000 500 $50,000.00 10 2019-02-01 00:00:00 B 2150 323 145 $10,739.00 11 2019-02-01 00:00:00 C 2000 320 166 $12,147.00 <pre><code>(\n    traffic\n    .assign(year=traffic.date.dt.year)\n    .groupby('year')\n    .agg({'revenue': 'sum'})\n    .assign(diff=lambda x: x['revenue'].diff())\n    .style.format(fmt_currency, na_rep='')\n)\n</code></pre> revenue diff year 2018 $49,400.00 2019 $100,827.00 $51,427.00 <pre><code>import icanexplain as ice\n\nexplainer = ice.FunnelExplainer(\n    funnel=['impressions', 'clicks', 'conversions', 'revenue'],\n    period='year',\n    group=['month', 'group']\n)\ntraffic = traffic.assign(\n    month=traffic.date.dt.month,\n    year=traffic.date.dt.year\n)\nexplanation = explainer(traffic)\nexplanation.style.format(fmt_currency)\n</code></pre> impressions_contribution clicks_over_impressions_contribution conversions_over_clicks_contribution revenue_over_conversions_contribution year month group 2019 1 A $0.00 -$1,720.00 $4,586.67 -$2,411.67 B $705.00 $2,428.33 -$3,446.67 -$347.67 C -$2,150.00 $8,600.00 -$2,924.00 -$4,129.00 2 A $24,500.00 $0.00 $0.00 $25,000.00 B $855.00 $19.00 -$1,254.00 -$281.00 C -$1,750.00 $4,200.00 $420.00 $527.00 <pre><code>(\n    explanation\n    .groupby('year').sum().sum(axis=1)\n    .to_frame('sum')\n    .style.format(fmt_currency)\n)\n</code></pre> sum year 2019 $51,427.00"},{"location":"methods/funnel/","title":"Funnel decomposition","text":"<pre><code># Funnel\n</code></pre>"},{"location":"methods/ratio/","title":"Ratio decomposition","text":""},{"location":"methods/total/","title":"Total decomposition","text":"\\[ \\sum_{i=1}^n \\frac{1}{2} \\]"},{"location":"theme/","title":"Kilsbergen","text":"<p>A clean MkDocs theme.</p> <p>This theme is designed for Tako, Pris, and Noblit. It is not flexible on purpose: it supports everything I need, and nothing more.</p>"},{"location":"theme/#demos","title":"Demos","text":"<ul> <li>Musium documentation</li> <li>Noblit documentation</li> <li>Pris documentation</li> <li>RCL documentation</li> <li>Squiller documentation</li> <li>Tako documentation</li> </ul>"},{"location":"theme/#features","title":"Features","text":"<ul> <li>Responsive design</li> <li>Zero javascript</li> </ul>"},{"location":"theme/#usage","title":"Usage","text":"<p>One easy way to use this theme, is to add it as a Git submodule to your <code>docs</code> directory, e.g. at <code>docs/theme</code>. Then add the following in your <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  name: null\n  custom_dir: docs/theme\n</code></pre> <p>This theme requires MkDocs 1.1 or later. For earlier versions, delete this <code>README.md</code> to work around this bug.</p> <p>To enable anchors next to section headings, add the following to your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - toc:\n      permalink: true\n      permalink_title: null\n</code></pre> <p>To enable syntax highlighting, ensure that <code>pygmentize</code> is available, and add the following to your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - codehilite\n</code></pre> <p>See also the python-markdown list of extensions.</p>"},{"location":"theme/#license","title":"License","text":"<p>Kilsbergen is licensed under the Apache 2.0 license. In the generated documentation, it is fine to just link to this readme from a comment.</p>"}]}