{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Well met, fellow data analyst!</p> <p>If you're like me, then you're used to pesky stakeholders, who ask you why a metric changed. These kind of questions are tricky to answer confidently. It usually ends with you sharing a few other related metrics, giving some context, and providing a weak explanation. All the while hoping the stakeholder will be satisfied (or fed up) and go away \ud83d\ude2e\u200d\ud83d\udca8</p> <p>This isn't a good situation to be in. But what if you could tell exactly why a metric changed? Wouldn't that be great? \ud83e\udd29</p> <p><code>icanexplain</code> is a Python package. It provides a framework to break a metric down into drivers. It attributes the change in a metric to its drivers. Instead of just measuring the evolution of each driver, we can exactly quantify how much of the metric's evolution is due to each driver.</p> <p>The best way to understand how <code>icanexplain</code> works is to see it in action, by checking out the examples.</p> <p><code>icanexplain</code> works with pandas and Polars out of the box. Additionally, it can run against other backends (e.g. SQL) because it is implemented with Ibis. Check out this example for more information.</p> <p></p>"},{"location":"installation/","title":"Installation","text":"<pre><code>pip install icanexplain\n</code></pre>"},{"location":"examples/fashion-brand-co2e/","title":"Fashion brand CO2e emissions","text":"<p>Fashion brands increasingly have to be aware and report on their environmental footprint.</p> <p>The following dataset comes from a real fashion brand, and has been anomymized. Each row represents a product manufactured in a given year.</p> <pre><code>import icanexplain as ice\n\ndef fmt_CO2e(kg):\n    if abs(kg) &lt; 1e3:\n        return f'{kg:,.2f}kgCO2e'\n    return f'{kg / 1e6:,.1f}ktCO2e'\n\nproducts = ice.datasets.load_product_footprints()\nproducts.sample(5).style.format({'footprint': fmt_CO2e, 'units': '{:,d}'})\n</code></pre> year category product_id footprint units 125806 2023 PANTS 50cfd752 19.70kgCO2e 4,005 133636 2023 PANTS 8604da71 37.84kgCO2e 2,606 8642 2021 PANTS be9c4bf8 29.28kgCO2e 682 27022 2021 SHIRT c632725d 30.36kgCO2e 494 19121 2021 PANTS 8debd6ef 36.85kgCO2e 653 <p>The <code>footprint</code> column indicates the product's carbon footprint in kgCO2e. The <code>units</code> column corresponds to the number of units produced.</p> <p>Companies usually report their emissions on a yearly basis. We can do this by multiplying the footprint of each product, with the number of units produced, and summing the results.</p> <pre><code>(\n    products\n    .groupby('year')\n    .apply(lambda g: (g['footprint'] * g['units']).sum() / g['units'].sum(), include_groups=False)\n    .to_frame('average')\n    .assign(diff=lambda x: x.average.diff())\n    .style.format(fmt_CO2e, na_rep='')\n)\n</code></pre> average diff year 2021 21.95kgCO2e 2022 21.71kgCO2e -0.24kgCO2e 2023 22.74kgCO2e 1.03kgCO2e <p>The average footprint went down between 2021 and 2022. It then went back up in 2023. Of course, we want to understand why. When they see this, fashion brands have one word coming out of their mouth: why, why, why?</p> <p>The overall average footprint can change for two reasons:</p> <ol> <li>The average footprint per product category evolved.</li> <li>The mix of product categories evolved.</li> </ol> <p>The second reason is called the mix effect. For instance, let's say t-shirts have a lower footprint than jackets. If the share of jackets produced in 2023 is higher than in 2022, the average footprint will go up.</p> <p>The jackets in 2023 aren't necessarily the same than those of 2022. They could be more sustainable, and have a lower footprint. This is the tricky part: we need to disentangle the mix effect from the evolution of the footprint of each product category. That is the value proposition of this package.</p> <pre><code>explainer = ice.MeanExplainer(\n    fact='footprint',\n    count='units',\n    period='year',\n    group='category',\n)\nexplanation = explainer(products)\nexplanation.style.format({'inner': fmt_CO2e, 'mix': fmt_CO2e}, na_rep='')\n</code></pre> inner mix year category 2022 DRESS 0.05kgCO2e -0.14kgCO2e JACKET -0.17kgCO2e -0.69kgCO2e PANTS 0.61kgCO2e 0.20kgCO2e SHIRT -0.02kgCO2e 0.00kgCO2e SWEATER -0.39kgCO2e -0.09kgCO2e TSHIRT 0.08kgCO2e 0.30kgCO2e 2023 DRESS -0.08kgCO2e 0.51kgCO2e JACKET -0.13kgCO2e 0.97kgCO2e PANTS -0.22kgCO2e -0.09kgCO2e SHIRT 0.02kgCO2e -0.03kgCO2e SWEATER -0.06kgCO2e 0.36kgCO2e TSHIRT -0.16kgCO2e -0.06kgCO2e <p>Here's the meaning of each column:</p> <ul> <li><code>inner</code> is the difference due to the change in the average footprint per unit. A negative inner values means the footprint per unit shifted in a way that reduced emissions. For instance, low emission products seem to have been prioritized in 2022 (-17.5ktCO2e), but not in 2023 (+73.4ktCO2e).</li> <li><code>mix</code> is the difference due to the change in the number of units produced. A negative mix value means the number of units produced shifted in a way that reduced emissions.</li> </ul> <p>A convenient way to read these values is to use a waterfall chart.</p> <pre><code>explainer.plot(products)\n</code></pre> <p>This is better than reporting the average footprint and unit produced separately. It's more informative to quantify their contribution to the change in emissions. Here it's good to confirm that the decrease in emissions is mostly due to a reduction in the number of units produced for both years. But it's also good to see that there was an increase due to the average footprint in 2023. Importantly, each one of these effects is calculated, and not just assumed.</p> <p>It's natural to want to deepen the analysis. For instance:</p> <ol> <li>Why is there a significant inner contribution for pants in 2022? Is it because the materials are less sustainable? Or because the pants got heavier?</li> <li>The reduction in 2023 is mainly due to the reduction in the number of units produced. Can this be broken down into marketing segments? For instance, is the reduction mainly driven by online or in-person sales? How does this break down by country?</li> </ol> <p>These questions hint at the interactive aspect of this kind of analysis. Once you break down a metric's evolution along a dimension, the next steps are to break down the metric (question 1) and/or include another dimension (question 2).</p> <p></p>"},{"location":"examples/ibis/","title":"Different backend support with Ibis","text":"<p>icanexplain is implemented with Ibis. This means that it is framework agnostic, and can work with different backends. This example shows how to use it with DuckDB.</p> <pre><code>import ibis\nimport icanexplain as ice\n\nproducts_df = ice.datasets.load_product_footprints()\ncon = ibis.connect(\"duckdb://example.ddb\")\ncon.create_table(\n    \"products\", products_df, overwrite=True\n)\n</code></pre> <pre>DatabaseTable: example.main.products\n  year       int64\n  category   string\n  product_id string\n  footprint  float64\n  units      int64\n</pre> <pre><code>con = ibis.connect(\"duckdb://example.ddb\")\ncon.list_tables()\n</code></pre> <pre><code>['products']\n</code></pre> <pre><code>ibis.options.interactive = True\nproducts = con.table(\"products\")\nproducts.head()\n</code></pre> <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 year  \u2503 category \u2503 product_id \u2503 footprint \u2503 units \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64 \u2502 string   \u2502 string     \u2502 float64   \u2502 int64 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  2021 \u2502 DRESS    \u2502 848be709   \u2502     96.04 \u2502   803 \u2502\n\u2502  2021 \u2502 DRESS    \u2502 658f92b3   \u2502     58.15 \u2502  3367 \u2502\n\u2502  2021 \u2502 DRESS    \u2502 3a26f323   \u2502     82.94 \u2502   240 \u2502\n\u2502  2021 \u2502 DRESS    \u2502 6221dca6   \u2502     85.94 \u2502   432 \u2502\n\u2502  2021 \u2502 DRESS    \u2502 46864ac5   \u2502     84.99 \u2502   816 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <pre><code>explainer = ice.SumExplainer(\n    fact='footprint',\n    count='units',\n    group='category',\n    period='year'\n)\nexplanation = explainer(products)\nexplanation\n</code></pre> <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 year  \u2503 category \u2503 inner         \u2503 mix           \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64 \u2502 string   \u2502 float64       \u2502 float64       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  2022 \u2502 DRESS    \u2502  3.931932e+06 \u2502 -1.881370e+07 \u2502\n\u2502  2022 \u2502 JACKET   \u2502 -1.510008e+07 \u2502 -9.238617e+07 \u2502\n\u2502  2022 \u2502 PANTS    \u2502  4.002506e+07 \u2502  5.295190e+07 \u2502\n\u2502  2022 \u2502 SHIRT    \u2502 -1.484809e+06 \u2502 -5.791456e+06 \u2502\n\u2502  2022 \u2502 SWEATER  \u2502 -2.676209e+07 \u2502  1.181504e+07 \u2502\n\u2502  2022 \u2502 TSHIRT   \u2502  6.650940e+06 \u2502 -2.311836e+07 \u2502\n\u2502  2023 \u2502 DRESS    \u2502 -4.078094e+06 \u2502 -1.240339e+07 \u2502\n\u2502  2023 \u2502 JACKET   \u2502 -6.793317e+06 \u2502 -4.924036e+07 \u2502\n\u2502  2023 \u2502 PANTS    \u2502 -1.636299e+07 \u2502 -2.295608e+08 \u2502\n\u2502  2023 \u2502 SHIRT    \u2502  8.920908e+05 \u2502 -4.019144e+06 \u2502\n\u2502     \u2026 \u2502 \u2026        \u2502             \u2026 \u2502             \u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <pre><code>type(explanation)\n</code></pre> <pre><code>ibis.expr.types.relations.Table\n</code></pre> <pre><code>explanation.execute()\n</code></pre> year category inner mix 0 2022 DRESS 3.931932e+06 -1.881370e+07 1 2022 JACKET -1.510008e+07 -9.238617e+07 2 2022 PANTS 4.002506e+07 5.295190e+07 3 2022 SHIRT -1.484809e+06 -5.791456e+06 4 2022 SWEATER -2.676209e+07 1.181504e+07 5 2022 TSHIRT 6.650940e+06 -2.311836e+07 6 2023 DRESS -4.078094e+06 -1.240339e+07 7 2023 JACKET -6.793317e+06 -4.924036e+07 8 2023 PANTS -1.636299e+07 -2.295608e+08 9 2023 SHIRT 8.920908e+05 -4.019144e+06 10 2023 SWEATER -5.701391e+06 -1.130507e+08 11 2023 TSHIRT -1.150391e+07 -8.391323e+07 <pre><code>ibis.to_sql(explanation)\n</code></pre> <pre><code>SELECT\n  *\nFROM (\n  SELECT\n    \"t9\".\"year\",\n    \"t9\".\"category\",\n    \"t9\".\"count_lag\" * (\n      \"t9\".\"mean\" - \"t9\".\"mean_lag\"\n    ) AS \"inner\",\n    (\n      \"t9\".\"count\" - \"t9\".\"count_lag\"\n    ) * \"t9\".\"mean\" AS \"mix\"\n  FROM (\n    SELECT\n      \"t8\".\"category\",\n      \"t8\".\"year\",\n      \"t8\".\"mean\",\n      \"t8\".\"count\",\n      LAG(\"t8\".\"mean\", 1) OVER (PARTITION BY \"t8\".\"category\" ORDER BY \"t8\".\"year\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS \"mean_lag\",\n      LAG(\"t8\".\"count\", 1) OVER (PARTITION BY \"t8\".\"category\" ORDER BY \"t8\".\"year\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS \"count_lag\"\n    FROM (\n      SELECT\n        \"t7\".\"category\",\n        \"t7\".\"year\",\n        COALESCE(\"t7\".\"mean\", 0) AS \"mean\",\n        COALESCE(\"t7\".\"count\", 0) AS \"count\"\n      FROM (\n        SELECT\n          \"t3\".\"category\",\n          \"t4\".\"year\",\n          \"t6\".\"mean\",\n          \"t6\".\"count\"\n        FROM (\n          SELECT DISTINCT\n            \"t0\".\"category\"\n          FROM \"products\" AS \"t0\"\n        ) AS \"t3\"\n        CROSS JOIN (\n          SELECT DISTINCT\n            \"t0\".\"year\"\n          FROM \"products\" AS \"t0\"\n        ) AS \"t4\"\n        LEFT OUTER JOIN (\n          SELECT\n            \"t0\".\"category\",\n            \"t0\".\"year\",\n            SUM(\"t0\".\"footprint\" * \"t0\".\"units\") / SUM(\"t0\".\"units\") AS \"mean\",\n            SUM(\"t0\".\"units\") AS \"count\"\n          FROM \"products\" AS \"t0\"\n          GROUP BY\n            1,\n            2\n        ) AS \"t6\"\n          ON \"t3\".\"category\" = \"t6\".\"category\" AND \"t4\".\"year\" = \"t6\".\"year\"\n      ) AS \"t7\"\n    ) AS \"t8\"\n  ) AS \"t9\"\n  ORDER BY\n    \"t9\".\"year\" ASC,\n    \"t9\".\"category\" ASC\n) AS \"t10\"\nWHERE\n  \"t10\".\"year\" IS NOT NULL\n  AND \"t10\".\"category\" IS NOT NULL\n  AND \"t10\".\"inner\" IS NOT NULL\n  AND \"t10\".\"mix\" IS NOT NULL\n</code></pre>"},{"location":"examples/iowa-whiskey-sales/","title":"Iowa whiskey sales","text":"<p>Let's look at whiskey sales in Iowa. This is a subset of the data from the Iowa Liquor Sales dataset.</p> <pre><code>import icanexplain as ice\n\nsales = ice.datasets.load_iowa_whiskey_sales()\nsales.head().style.format()\n</code></pre> date category vendor sales_amount price_per_bottle bottles_sold bottle_volume_ml year 0 2012-06-04 CANADIAN WHISKIES CONSTELLATION WINE COMPANY, INC. 94.020000 15.670000 6 1750 2012 1 2016-01-05 STRAIGHT BOURBON WHISKIES CAMPARI(SKYY) 18.760000 9.380000 2 375 2016 2 2016-05-25 CANADIAN WHISKIES DIAGEO AMERICAS 11.030000 11.030000 1 300 2016 3 2016-01-20 CANADIAN WHISKIES PHILLIPS BEVERAGE COMPANY 33.840000 11.280000 3 750 2016 4 2012-03-19 CANADIAN WHISKIES CONSTELLATION WINE COMPANY, INC. 94.020000 15.670000 6 1750 2012 <p>The <code>sales_amount</code> column represents the bill a customer payed for a given transaction. We can sum it and group by year to see how the total sales amount evolves over time.</p> <pre><code>import locale\n\nlocale.setlocale(locale.LC_MONETARY, 'en_US.UTF-8')\ndef fmt_currency(x):\n    return locale.currency(x, grouping=True)\n\n(\n    sales.groupby('year')['sales_amount']\n    .sum()\n    .to_frame()\n    .assign(diff=lambda x: x.diff())\n    .style.format(lambda x: fmt_currency(x) if x &gt; 0 else '')\n)\n</code></pre> sales_amount diff year 2012 $1,842,098.86 2016 $2,298,505.88 $456,407.02 2020 $3,378,164.43 $1,079,658.55 <p>Ok, but why? Well, we can use icanexplain to break down the evolution into two effects:</p> <ol> <li>The inner effect: how much the average transaction value changed.</li> <li>The mix effect: how much the number of transations changed.</li> </ol> <pre><code>import icanexplain as ice\n\nexplainer = ice.SumExplainer(\n    fact='sales_amount',\n    period='year',\n    group='category'\n)\nexplanation = explainer(sales)\n(\n    explanation.style\n    .format(lambda x: fmt_currency(x) if x &gt; 0 else '$0')\n    .set_properties(**{'text-align': 'right'})\n)\n</code></pre> inner mix year category 2016 BLENDED WHISKIES $17,854.43 $7,356.77 CANADIAN WHISKIES $0 $225,902.66 CORN WHISKIES $0 $4,113.90 IRISH WHISKIES $22,144.48 $75,122.83 SCOTCH WHISKIES $19,591.97 $0 SINGLE BARREL BOURBON WHISKIES $1,852.03 $6,375.43 STRAIGHT BOURBON WHISKIES $107,144.93 $97,934.50 STRAIGHT RYE WHISKIES $0 $0 2020 BLENDED WHISKIES $83,342.60 $59,768.58 CANADIAN WHISKIES $224,022.62 $149,363.35 CORN WHISKIES $1,517.48 $1,453.26 IRISH WHISKIES $0 $67,344.41 SCOTCH WHISKIES $19,840.48 $0 SINGLE BARREL BOURBON WHISKIES $11,958.32 $3,819.27 STRAIGHT BOURBON WHISKIES $167,864.46 $268,064.74 STRAIGHT RYE WHISKIES $0 $64,056.43 <p>For instance, we see that the average transation amount for blended whiskies contributed to an $17,854 increase in sales from 2012 to 2016. This is the inner effect. The mix effect for blended whiskies, on the other hand, contributed to a $7,356 increase in sales.</p> <p>Here's another example: the mix effect of Canadian whiskies is $225,902. This value, the mix effect, represents the increase due to the number of extra sales for Canadian whiskies. The inner effect, on the other hand, is $0. This means that the average transaction value for Canadian whiskies did not change between 2012 and 2016, and therefore didn't contribute to the increase in sales.</p> <p>A visual way to look interpret the above table is to use a waterfall chart. The idea is that the contributions sum to the difference between two periods. In this case, the difference in sales from 2012 to 2016 is $456,407. The waterfall chart shows how the inner and mix effects contributed to this difference.</p> <pre><code>explainer.plot(sales)\n</code></pre>"},{"location":"examples/simple-revenue-funnel/","title":"Simple revenue funnel","text":"<p>We look at a toy website funnel in this example. Imagine a fictitious website that sells stuff. Users go to the website, are presented with items, can add them to their cart, and then can buy them.</p> <pre><code>import pandas as pd\nimport locale\n\nlocale.setlocale(locale.LC_MONETARY, 'en_US.UTF-8')\ndef fmt_currency(x):\n    return locale.currency(x, grouping=True)\n\ntraffic = pd.DataFrame({\n    'date': ['2018-01-01', '2018-01-01', '2018-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2018-02-01', '2018-02-01', '2018-02-01', '2019-02-01', '2019-02-01', '2019-02-01'],\n    'group': ['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C'],\n    'impressions': [1000, 2000, 2500, 1000, 2150, 2000, 50, 2000, 2500, 2500, 2150, 2000],\n    'clicks': [150, 150, 250, 120, 200, 400, 20, 300, 250, 1000, 323, 320],\n    'conversions': [120, 150, 125, 160, 145, 166, 10, 150, 125, 500, 145, 166],\n    'revenue': ['$8,600', '$9,400', '$10,750', '$9,055', '$8,739', '$10,147', '$500', '$11,400', '$8,750', '$50,000', '$10,739', '$12,147'],\n})\ntraffic['date'] = pd.to_datetime(traffic['date'])\ntraffic['revenue'] = traffic['revenue'].str.replace('$', '', regex=False).str.replace(',', '', regex=False).astype(float)\ntraffic.style.format({'revenue': fmt_currency, 'date': lambda x: x.strftime('%Y-%m-%d')}, na_rep='N/A')\n</code></pre> date group impressions clicks conversions revenue 0 2018-01-01 A 1000 150 120 $8,600.00 1 2018-01-01 B 2000 150 150 $9,400.00 2 2018-01-01 C 2500 250 125 $10,750.00 3 2019-01-01 A 1000 120 160 $9,055.00 4 2019-01-01 B 2150 200 145 $8,739.00 5 2019-01-01 C 2000 400 166 $10,147.00 6 2018-02-01 A 50 20 10 $500.00 7 2018-02-01 B 2000 300 150 $11,400.00 8 2018-02-01 C 2500 250 125 $8,750.00 9 2019-02-01 A 2500 1000 500 $50,000.00 10 2019-02-01 B 2150 323 145 $10,739.00 11 2019-02-01 C 2000 320 166 $12,147.00 <p>The users are bucketed into 3 groups: A, B, C. We've also bucketed impressions/clicks/conversions/revenue figures by month of the year.</p> <p>We're interested in understanding how the metrics evolve over time. The basic method is to calculate each metric separately. To keep things simple, we can do this for each year.</p> <pre><code>pd.DataFrame({\n    'impressions': (\n        traffic\n        .assign(year=traffic.date.dt.year)\n        .groupby('year')\n        .impressions.sum()\n    ),\n    'click_rate': (\n        traffic\n        .assign(year=traffic.date.dt.year)\n        .groupby('year')\n        .apply(lambda x: x.clicks.sum() / x.impressions.sum(), include_groups=False)\n    ),\n    'conversion_rate': (\n        traffic\n        .assign(year=traffic.date.dt.year)\n        .groupby('year')\n        .apply(lambda x: x.conversions.sum() / x.clicks.sum(), include_groups=False)\n    ),\n    'average_spend': (\n        traffic\n        .assign(year=traffic.date.dt.year)\n        .groupby('year')\n        .apply(lambda x: x.revenue.sum() / x.conversions.sum(), include_groups=False)\n    ),\n    'revenue': (\n        traffic\n        .assign(year=traffic.date.dt.year)\n        .groupby('year')\n        .revenue.sum()\n    )\n}).style.format({'average_spend': fmt_currency, 'revenue': fmt_currency}, na_rep='')\n</code></pre> impressions click_rate conversion_rate average_spend revenue year 2018 10050 0.111443 0.607143 $72.65 $49,400.00 2019 11800 0.200254 0.542531 $78.65 $100,827.00 <p>In and of itself, this is already quite interesting. However, what we really want to know is how the change of each metric contributes to the change in revenue. This is where icanexplain comes in.</p> <pre><code>import icanexplain as ice\n\nexplainer = ice.FunnelExplainer(\n    funnel=['impressions', 'clicks', 'conversions', 'revenue'],\n    period='year',\n    group=['month', 'group']\n)\ntraffic = traffic.assign(\n    month=traffic.date.dt.month,\n    year=traffic.date.dt.year\n)\nexplanation = explainer(traffic)\nexplanation.style.format(fmt_currency).set_properties(**{'text-align': 'right'})\n</code></pre> impressions_contribution clicks_over_impressions_contribution conversions_over_clicks_contribution revenue_over_conversions_contribution year month group 2019 1 A $0.00 -$1,720.00 $4,586.67 -$2,411.67 B $705.00 $2,428.33 -$3,446.67 -$347.67 C -$2,150.00 $8,600.00 -$2,924.00 -$4,129.00 2 A $24,500.00 $0.00 $0.00 $25,000.00 B $855.00 $19.00 -$1,254.00 -$281.00 C -$1,750.00 $4,200.00 $420.00 $527.00 <p>This is powerful, because it allows us to understand the drivers of revenue growth. For example, between January 2018 and January 2019, revenue went up by $8,600 due an increase in clicks for group C. This is more insightful than just saying that their click rate went up.</p> <p>One thing to keep in mind is that contributions sum up to the overall difference between two periods. This means that it's easy to unit test that the contributions are correct:</p> <pre><code>(\n    explanation\n    .groupby('year').sum().sum(axis=1)\n    .to_frame('sum')\n    .style.format(fmt_currency)\n)\n</code></pre> sum year 2019 $51,427.00 <p>Of course, it would be more interesting to apply this methodology to some real data. One example is the Google Analytics dataset sample which is publicly available in BigQuery. </p>"},{"location":"methods/funnel/","title":"Funnel decomposition","text":"<pre><code># Funnel\n</code></pre>"},{"location":"methods/ratio/","title":"Ratio decomposition","text":""},{"location":"methods/total/","title":"Total decomposition","text":"\\[ \\sum_{i=1}^n \\frac{1}{2} \\]"},{"location":"theme/","title":"Kilsbergen","text":"<p>A clean MkDocs theme.</p> <p>This theme is designed for Tako, Pris, and Noblit. It is not flexible on purpose: it supports everything I need, and nothing more.</p>"},{"location":"theme/#demos","title":"Demos","text":"<ul> <li>Musium documentation</li> <li>Noblit documentation</li> <li>Pris documentation</li> <li>RCL documentation</li> <li>Squiller documentation</li> <li>Tako documentation</li> </ul>"},{"location":"theme/#features","title":"Features","text":"<ul> <li>Responsive design</li> <li>Zero javascript</li> </ul>"},{"location":"theme/#usage","title":"Usage","text":"<p>One easy way to use this theme, is to add it as a Git submodule to your <code>docs</code> directory, e.g. at <code>docs/theme</code>. Then add the following in your <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  name: null\n  custom_dir: docs/theme\n</code></pre> <p>This theme requires MkDocs 1.1 or later. For earlier versions, delete this <code>README.md</code> to work around this bug.</p> <p>To enable anchors next to section headings, add the following to your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - toc:\n      permalink: true\n      permalink_title: null\n</code></pre> <p>To enable syntax highlighting, ensure that <code>pygmentize</code> is available, and add the following to your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - codehilite\n</code></pre> <p>See also the python-markdown list of extensions.</p>"},{"location":"theme/#license","title":"License","text":"<p>Kilsbergen is licensed under the Apache 2.0 license. In the generated documentation, it is fine to just link to this readme from a comment.</p>"}]}